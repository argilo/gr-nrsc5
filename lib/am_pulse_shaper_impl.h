/* -*- c++ -*- */
/*
 * Copyright 2025 Clayton Smith.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#ifndef INCLUDED_NRSC5_AM_PULSE_SHAPER_IMPL_H
#define INCLUDED_NRSC5_AM_PULSE_SHAPER_IMPL_H

#include <nrsc5/am_pulse_shaper.h>

namespace gr {
namespace nrsc5 {

constexpr int AM_FFT_SIZE = 256;
constexpr int AM_CP_SIZE = 14;
constexpr int AM_FFTCP_SIZE = AM_FFT_SIZE + AM_CP_SIZE;

/*
from sage.calculus.integration import numerical_integral

delta_f = 1488375 / 8192
alpha = 7/128
T = 1 / delta_f
Ts = (1+alpha) / delta_f

H(x) = piecewise([
    ((-(1-alpha)/2*T, (1-alpha)/2*T), 1),
    ([-(1+alpha)/2*T, -(1-alpha)/2*T], 1/2*(1 + cos(pi/(2*alpha)*(2*(-x)/T + alpha-1)))),
    ([(1-alpha)/2*T, (1+alpha)/2*T], 1/2*(1 + cos(pi/(2*alpha)*(2*x/T + alpha-1)))),
    ((-oo, -(1+alpha)/2*T), 0),
    (((1+alpha)/2*T, oo), 0)
])

G(x) = 90 / (Ts * sqrt(2*pi)) * e^(-4050 * (x/Ts)^2)

tau = var("tau")
pulse1 = [sqrt(numerical_integral(H(tau) * G((i/270)*Ts - tau), -Ts, Ts)[0])
          for i in range(-256, 256)]
for i in range(0, 512, 8):
    print(f"    {pulse1[i]:.6f}, {pulse1[i+1]:.6f}, {pulse1[i+2]:.6f}, {pulse1[i+3]:.6f},"
          f" {pulse1[i+4]:.6f}, {pulse1[i+5]:.6f}, {pulse1[i+6]:.6f}, {pulse1[i+7]:.6f},")
*/

float pulse[] = {
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000001, 0.000003, 0.000011, 0.000031, 0.000088, 0.000231,
    0.000577, 0.008637, 0.015042, 0.025040, 0.039899, 0.060941, 0.089370, 0.126069,
    0.171413, 0.225144, 0.286341, 0.353500, 0.424689, 0.497751, 0.570505, 0.640895,
    0.707107, 0.767629, 0.821294, 0.867320, 0.905339, 0.935435, 0.958128, 0.974326,
    0.985199, 0.992021, 0.995998, 0.998141, 0.999204, 0.999686, 0.999887, 0.999963,
    0.999989, 0.999997, 0.999999, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 0.999999, 0.999997,
    0.999989, 0.999963, 0.999887, 0.999686, 0.999204, 0.998141, 0.995998, 0.992021,
    0.985199, 0.974326, 0.958128, 0.935435, 0.905339, 0.867320, 0.821294, 0.767629,
    0.707107, 0.640895, 0.570505, 0.497751, 0.424689, 0.353500, 0.286341, 0.225144,
    0.171413, 0.126069, 0.089370, 0.060941, 0.039899, 0.025040, 0.015042, 0.008637,
    0.000577, 0.000231, 0.000088, 0.000031, 0.000011, 0.000003, 0.000001, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000
};

class am_pulse_shaper_impl : public am_pulse_shaper
{
private:
    // Nothing to declare in this block.

public:
    am_pulse_shaper_impl();
    ~am_pulse_shaper_impl();

    // Where all the action really happens
    int work(int noutput_items,
             gr_vector_const_void_star& input_items,
             gr_vector_void_star& output_items);
};

} // namespace nrsc5
} // namespace gr

#endif /* INCLUDED_NRSC5_AM_PULSE_SHAPER_IMPL_H */
